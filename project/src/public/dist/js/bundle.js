/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!******************************!*\
  !*** ./src/public/client.js ***!
  \******************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar store = {\n  user: {\n    name: \"Student\"\n  },\n  apod: '',\n  rovers: ['Curiosity', 'Opportunity', 'Spirit']\n}; // add our markup to the page\n\nvar root = document.getElementById('root');\n\nvar updateStore = (store, newState) => {\n  store = Object.assign(store, newState);\n  render(root, store);\n};\n\nvar render = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (root, state) {\n    root.innerHTML = App(state);\n  });\n\n  return function render(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // create content\n\n\nvar App = state => {\n  var {\n    rovers,\n    apod\n  } = state;\n  return \"\\n        <header></header>\\n        <main>\\n            \".concat(Greeting(store.user.name), \"\\n            <div class=\\\"wrapper\\\">\\n              <div class=\\\"tabs\\\">\\n                \").concat(getTabs(store), \"\\n              </div>\\n              <div class=\\\"content\\\"></div>\\n            </div>\\n\\n        </main>\\n        <footer></footer>\\n    \");\n}; // listening for load event because page should load before any JS is called\n\n\nwindow.addEventListener('load', () => {\n  render(root, store);\n}); // ------------------------------------------------------  COMPONENTS\n// Pure function that renders conditional information -- THIS IS JUST AN EXAMPLE, you can delete it.\n\nvar Greeting = name => {\n  if (name) {\n    return \"\\n            <h1>Welcome, \".concat(name, \"!</h1>\\n        \");\n  }\n\n  return \"\\n        <h1>Hello!</h1>\\n    \";\n}; // Example of a pure function that renders infomation requested from the backend\n\n\nvar ImageOfTheDay = apod => {\n  // If image does not already exist, or it is not from today -- request it again\n  var today = new Date();\n  var photodate = new Date(apod.date);\n\n  if (!apod || apod.date === today.getDate()) {\n    getImageOfTheDay(store);\n  } // check if the photo of the day is actually type video!\n\n\n  if (apod && apod.media_type === \"video\") {\n    return \"\\n            <p>See today's featured video <a href=\\\"\".concat(apod.url, \"\\\">here</a></p>\\n            <p>\").concat(apod.title, \"</p>\\n            <p>\").concat(apod.explanation, \"</p>\\n        \");\n  } else {\n    return \"\\n            <img src=\\\"\".concat(apod && apod.image.url, \"\\\" height=\\\"350px\\\" width=\\\"100%\\\" />\\n            <p>\").concat(apod && apod.image.explanation, \"</p>\\n        \");\n  }\n}; // ------------------------------------------------------  API CALLS\n// Example API call\n\n\nvar getImageOfTheDay = state => {\n  var {\n    apod\n  } = state;\n  fetch(\"http://localhost:3000/apod\").then(res => res.json()).then(apod => updateStore(store, {\n    apod\n  }));\n  return apod;\n};\n\nvar getTabs = store => {\n  var tabs = '';\n  store.rovers.map((rover, index) => {\n    tabs += \"<div class=\\\"tab \".concat(index === 0 && 'active', \"\\\">\").concat(rover, \"</div>\");\n  });\n  return tabs;\n};\n\n//# sourceURL=webpack://jsnd3_mars_dashboard/./src/public/client.js?");
/******/ })()
;